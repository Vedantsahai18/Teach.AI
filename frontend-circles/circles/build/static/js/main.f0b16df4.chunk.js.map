{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","setInterval","fetch","then","res","json","data","setState","location","console","log","state","catch","this","arr","Object","keys","forEach","key","push","style","background","width","window","innerWidth","height","innerHeight","map","item","x","Number","latest_left","y","latest_top","radius","fill","text","name","fontSize","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAyDeA,G,mMAlDQ,IAAD,OAClBC,aAAY,WACVC,MAAM,0BACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEC,SAAUF,IAC1BG,QAAQC,IAAI,EAAKC,MAAMH,aAExBI,MAAMH,QAAQC,OAChB,O,+BAEK,IAAD,OACP,GAAIG,KAAKF,MAAO,CAEd,IAAML,EAAOO,KAAKF,MAAMH,SACxBC,QAAQC,IAAIJ,GAEZ,IAAIQ,EAAM,GAKV,OAJAC,OAAOC,KAAKV,GAAMW,SAAQ,SAASC,GACjCJ,EAAIK,KAAKb,EAAKY,IACdT,QAAQC,IAAII,MAEP,yBAAKM,MAAO,CAACC,WAAY,UAAW,kBAAC,QAAD,CAAOC,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,aAAcZ,EAAIa,KAAI,SAAAC,GAAI,OAC7G,kBAAC,QAAD,KACE,kBAAC,SAAD,CAEEC,EAAI,EAAKlB,MAAU,KAAOmB,OAAOF,EAAKG,aAAa,GAAO,IAC1DC,EAAK,EAAKrB,MAAUmB,OAAOF,EAAKK,YAAc,IAAQ,IACtDC,OAAQ,IACRC,KAAK,YAEP,kBAAC,OAAD,aAAMC,KAAMR,EAAKS,KAAMC,SAAU,GACjCT,EAAK,EAAKlB,MAAU,KAAOmB,OAAOF,EAAKG,aAAa,EAAM,IAC1DC,EAAI,EAAKrB,MAAUmB,OAAOF,EAAKK,YAAc,IAAQ,IACrDE,KAAO,SAHP,WAIY,WAMxB,OACE,kC,GA3CYI,cCMEC,QACW,cAA7BjB,OAAOf,SAASiC,UAEe,UAA7BlB,OAAOf,SAASiC,UAEhBlB,OAAOf,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.f0b16df4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Rect, Text, Circle, Line } from \"react-konva\";\nimport { isTemplateElement } from \"@babel/types\";\n\nclass App extends Component {\n  componentDidMount() {\n    setInterval(() => {\n      fetch(\"http://localhost:5005/\")\n        .then(res => res.json())\n        .then(data => {\n          this.setState({ location: data });\n          console.log(this.state.location);\n        })\n        .catch(console.log);\n    }, 250);\n  }\n  render() {\n    if (this.state) {\n      // console.log(this.state.location);\n      const data = this.state.location\n      console.log(data)\n\n      let arr = []\n      Object.keys(data).forEach(function(key){\n        arr.push(data[key]);\n        console.log(arr)\n      })\n      return <div style={{background: \"white\"}} ><Stage width={window.innerWidth} height={window.innerHeight}>{arr.map(item =>               \n              <Layer>               \n                <Circle\n    \n                  x={(this.state) ? (1200 - Number(item.latest_left)+30) : (300)}\n                  y= {(this.state) ? (Number(item.latest_top) + 200) : (150)}\n                  radius={100}\n                  fill=\"#1C89BF\"\n                />\n                <Text text={item.name} fontSize={15} \n                x ={(this.state) ? (1200 - Number(item.latest_left)-9) : (150)}\n                y={(this.state) ? (Number(item.latest_top) + 200) : (150)}\n                fill = \"white\"\n                fontSize = {30}\n                />        \n              </Layer>\n      )}</Stage></div>;\n    }\n\n    return (\n      <div>\n\n        {/* {(this.state) ? (<div>{this.state.location.y}</div>) : (<div>Not defined</div>)} */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}